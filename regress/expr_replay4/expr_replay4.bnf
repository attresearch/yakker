; Expression example with lexical scoping using mix of
; late actions and early actions, and both forms of binding.
; Performs the same computation early and late. 
; We need to use attributes for early because there is no way to return both 
; early and late because there's no way to create a single action with
; both early and late components in Yakker's concrete syntax (as of 6/24/2011).
; So, for any nonterminal, it is judged either late or early producer, but not 
; both

start = o E$e o EOF ${Printf.eprintf " %d" e} @{Printf.eprintf " %d" ret} "".

EOF = !OCTET.

WSP = %d9|%d32|CR|LF.
o = *WSP !WSP.
wsp = [WSP].
INT>@(;ret:int) = (DIGIT *DIGIT)@i$i (@{int_of_string i} > @ret) ${int_of_string i}.

E>@(;ret:int) = E$x @{ret}@x o "+" o T$y (@{x+ret} > @ret) ${x+y} | T.
T>@(;ret:int) = T$x @{ret}@x o "*" o F$y (@{x*ret} > @ret) ${x*y} | F.
F>@(;ret:int) = "(" o E$e o ")" ${e} | INT.

; start = o E@e$e o EOF ${Printf.eprintf " %d" e} @{Printf.eprintf " %d" e}.

; EOF = !OCTET.

; WSP = %d9|%d32|CR|LF.
; o = *WSP !WSP.
; wsp = [WSP].
; INT = ((DIGIT *DIGIT)@i @{i})@i$i ${int_of_string i} @{int_of_string i}.

; E = E@x$x o "+" o T@y$y ${x+y} @{x+y} | T.
; T = T@x$x o "*" o F@y$y ${x*y} @{x*y} | F.
; F = "(" o E@e$e o ")" ${e} @{e} | INT.

@end {
  Yak.Pami.Simple.test_parse parse_file (fun () -> ())
}
