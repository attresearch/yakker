; working on getting yakker command-line arguments parsed.
; remaining issues:
; (1) what to do about errors, e.g., misspelled option
; (2) how to handle arguments that start with '-' but are not options
; (3) how to report the error to the user
; (4) what about args containing NULs
;
@begin {
(*******************************************************************************
 * Copyright (c) 2010 AT&T.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Trevor Jim and Yitzhak Mandelbaum
 *******************************************************************************)

open Yak

type command =
| Attributes_cmd
| Close_under_core_cmd
| Compile_cmd
| Copyrule_cmd
| Coroutine_cmd
| Desugar_cmd
| Desugar_gil_cmd
| Dearrow_cmd
| Dependency_graph_cmd
| Dot_cmd
| Exec_cmd
| Extract_cmd
| Fuse_cmd
| Generators_analysis_cmd
| Hash_cmd
| Infer_ty_cmd
| Info_cmd
| Inline_regular_cmd
| Inline_nullable_cmd
| Lexer_cmd
| Lift_cmd
| Lookahead_analysis_cmd
| Lr1_lookahead_cmd
| Minus_cmd
| Pads_lift_cmd
| Parse_cmd
| Precedence_analysis_cmd
| Print_gil_cmd
| Print_gul_cmd
| Print_relevance_cmd
| Replay_cmd
| Rfc_cmd
| Sort_cmd
| Strip_late_actions_cmd
| Subset_cmd
| Translate_dypgen_cmd
| Translate_dypgen_scannerless_cmd
| Tx_prec_cmd
| Unroll_star_cmd
| Wrap_cmd

let cmd = ref Print_gul_cmd
let after = ref None
let files = ref []
let roots = ref []
let exec_l = ref []
let rfc_num = ref 0
let only = ref false

type backend =
  | Fun_BE   (** Functional backend (parser combinators).*)
  | Wadler_BE   (** Haskell functional backend (parser combinators).*)
  | Peg_BE of bool (** PEG backend. argument indicates whether
                       to use more liberal (PADS-style) star. *)
  | Trans_BE (** Transducer backend. *)

let backend = ref Trans_BE
}
cmd-line-args = command$c *args eof { cmd := c }.
o = %d0 .
arg = 1*CHAR !CHAR .
file = (CHAR - "-") *CHAR !CHAR .
phases = ; these commands can be controlled by -after
        "attributes" o                    { Attributes_cmd }
      | "close-under-core" o              { Close_under_core_cmd }
      | "copyrule" o                      { Copyrule_cmd }
      | "desugar" o                       { Desugar_cmd }
      | "desugar-gil" o                   { Desugar_gil_cmd }
      | "hash" o                          { Hash_cmd }
      | "arrow-notation" o                { Dearrow_cmd }
      | "infer-types" o                   { Infer_ty_cmd }
      | "inline-regular" o                { Inline_regular_cmd }
      | "inline-nullable" o               { Inline_nullable_cmd }
      | "lexer" o                         { Lexer_cmd }
      | "lift" o                          { Lift_cmd }
      | "minus" o                         { Minus_cmd }
      | "precedence" o                    { Tx_prec_cmd }
      | "subset" o                        { Subset_cmd }
      | "unroll-star" o                   { Unroll_star_cmd }
      | "wrap" o                          { Wrap_cmd }
      | "replay" o                        { Replay_cmd }
command =
        phases$p                          { (match p with
                                               Inline_regular_cmd -> Compileopt.inline_regular := true
                                             | Unroll_star_cmd -> if !Compileopt.unroll_star_n<1 then Compileopt.unroll_star_n := 1
                                             | _ -> ());
                                            p }
      | "compile" o                       { Compile_cmd }
      | "coroutine" o                     { Coroutine_cmd }
      | "dependency-graph" o              { Dependency_graph_cmd }
      | "dot" o                           { Dot_cmd }
      | "exec" o arg$f *(o arg$x {x})$l o { files := f::!files; exec_l := l; Exec_cmd }
      | "extract" o                       { Extract_cmd }
      | "fuse" o                          { Compileopt.coalesce := true; Fuse_cmd }
      | "get-generators" o                { Generators_analysis_cmd }
      | "info" o                          { Info_cmd }
      | "lookahead-analysis" o            { Lookahead_analysis_cmd }
      | "lr1-lookahead" o                 { Lr1_lookahead_cmd }
      | "parse" o                         { Parse_cmd }
      | "precedence-analysis" o           { Precedence_analysis_cmd }
      | "print" o                         { Print_gul_cmd }
      | "print-gil" o                     { Print_gil_cmd }
      | "print-relevance" o               { Print_relevance_cmd }
      | "rfc" (1*DIGIT)$n o               { try rfc_num := int_of_string n; Rfc_cmd with _ -> failwith "Invalid RFC number" }
      | "sort" o                          { Sort_cmd }
      | "add-late-actions" o              { Pads_lift_cmd }
      | "strip-late-actions" o            { Strip_late_actions_cmd }
      | "translate-dypgen" o              { Translate_dypgen_cmd }
      | "translate-dypgen-scannerless" o  { Translate_dypgen_scannerless_cmd }

args =
        "-after" o phases$p               { after := Some p } ""
      | "-arrow-notation" o               { Compileopt.use_wrap_and_attr := false;      
                                            Compileopt.use_coroutines    := false } ""
      | "-hybrid-arrow" o                 { Compileopt.use_coroutines := false } ""  ; For testing; not (yet) of practical use.
      | "-backend" o
          ( "fun" {Fun_BE}
          | "tx"  {Trans_BE}
          | "wadler"  {Wadler_BE}
          | "peg-strict" {Peg_BE false}
          | "peg" {Peg_BE true} )$b o     { backend := b } ""
      | "-case-insensitive" o             { Compileopt.case_sensitive := false } ""
      | "-check-labels" o                 { Compileopt.check_labels := true } ""
      | "-counter" o (1*DIGIT)$n o        { Variables.counter := (int_of_string n) } ""
      | "-inline-cs" o                    { Compileopt.inline_cs := true } ""
      | "-inline-regular" o               { Compileopt.inline_regular := true } ""
      | "-lookahead" o                    { Compileopt.lookahead := true } ""
      | "-memoize-history" o              { Compileopt.memoize_history := true } ""
      | "-no-coalesce" o                  { Compileopt.coalesce := false } ""
      | "-no-collapse-calls" o            { Compileopt.collapse_calls := false } ""
      | "-no-memoize-history" o           { Compileopt.memoize_history := false } ""
      | "-no-nullability-preds" o         { Compileopt.gen_nullpreds := false } ""
      | "-no-optimize-pam" o              { Compileopt.gen_optimize_pam := false } ""
      | "-no-replay" o                    { Compileopt.repress_replay := true } ""
      | "-no-skip-opt" o                  { Compileopt.skip_opt := false } ""
      | "-only" o                         { only := true } ""
      | "-prefix-history" o               { Compileopt.postfix_history := false } ""
      | "-root" o arg$x o                 { roots := x::!roots } ""
      | "-unit-history" o                 { Compileopt.unit_history := true } ""
      | "-unroll-star" o (1*DIGIT)$n o    { Compileopt.unroll_star_n := (int_of_string n) } ""
      | "-use-fsm" o                      { Compileopt.use_fsm := true } ""
      | "-use-fst" o                      { Compileopt.use_fsm := false } ""
      | "-v" o                            { Yak.Logging.add_features Yak.Logging.Features.verbose } ""
      | file$f o                          { files := f::!files } ""
.
eof = "" !OCTET .
@end {

let args_ykbuf = Yak.YkBuf.strings2buf Sys.argv 1
let what_arg = Yak.YkBuf.stringsposn2string Sys.argv 1
let process() =
    (try
      ignore(parse args_ykbuf); (!cmd, List.rev !files, List.rev !roots, !backend)
    with
      Yak.Pami.Parse_error("Error at byte.", i, _, _) ->
        let bad_arg = what_arg i in
        let bad = Sys.argv.(bad_arg) in
        if bad_arg = 1 then
          raise(Failure(Printf.sprintf "Unrecognized command '%s'" bad))
        else if String.length bad > 0 && String.get bad 0 = '-' then
          raise(Failure(Printf.sprintf "Unrecognized option '%s'" bad))
        else
          raise(Failure(Printf.sprintf "Bad argument '%s'" bad)))
}
