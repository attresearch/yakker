@ocaml {
(*******************************************************************************
 * Copyright (c) 2010 AT&T.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Trevor Jim and Yitzhak Mandelbaum
 *******************************************************************************)

(*
Bootstrapping ABNF parser.  Started with RFC4234 and modified.

Stricter on structure of text within braces. Specifically, tracks
parens and string in addition to braces, while old version only
tracked braces.

Known deficiencies:

  There are places where abnf-echo.bnf requires spaces that parse.y does not,
  e.g.,

    a = b$x{foo();}

  fails between the x and the left brace.  Need context-sensitive whitespace to
  fix this.

Notes on RFC4234:
  Does not define HASH #.
  Does not allow spaces between the numbers
    for repeat: "1*3a" works, but "1 *3a," "1* 3a," and "1*3 a" do not.
  Uses o to consume whitespace, but that must end in a SP
  or HTAB, so that

  a
  = b

  fails, but

  a
   = b

  succeeds.
*)

open Yak
open Gul
let process_alt r_left = function
    None -> r_left
  | Some (0,r) -> mkALT([r_left;r])
  | Some (_,r) -> mkMINUS(r_left,r)

let partition_map f l =
  let xs, ys =
    List.fold_left
      (fun (xs, ys) z ->
        match f z with
          | Util.Left x -> x::xs, ys
          | Util.Right y -> xs, y::ys) ([],[]) l in
  List.rev xs, List.rev ys

let extract_pd = function
      [] -> [||]
    | [p] -> p
    | _ -> Util.warn Util.Sys_warn "More than one precedence declaration in file."; [||]

(* Split a string into pieces separated by character c *)
let split s c =
  let rec positions i =
    try
      let next = String.index_from s i c in
      next :: positions (next+1)
    with Not_found -> [] in
  let rec cut i = function
      [] -> if i >= String.length s then [] else [String.sub s i (String.length s - i)]
    | hd::tl ->
        String.sub s i (hd-i) :: cut (hd+1) tl in
  match positions 0 with [] -> [s]
  | x -> cut 0 x

let var_typ s =
  match split s ':' with
    [var;typ] -> (var,typ)
  | _ -> raise Not_found

let var_exp s =
  match split s '=' with (* This isn't robust because = can be used inside of expressions*)
    [var;typ] -> (var,typ)
  | _ -> raise Not_found

let all_but_last s =
  let l = String.length s in
  if l=0 then s else
  String.sub s 0 (l - 1)
}

@ocaml {
open Gul
module Location = struct
open Lexing
open Printf
type t = { loc_start: position; loc_end: position; loc_ghost: bool };;
let input_name = ref "_none_"
let (msg_file, msg_line, msg_chars, msg_to, msg_colon, msg_head) =
  ("File \"", "\", line ", ", characters ", "-", ":", "")

(* return file, line, char from the given position *)
let get_pos_info pos =
  let (filename, linenum, linebeg) =
    if pos.pos_fname = "" && !input_name = "" then
      ("", -1, 0)
    else
      (pos.pos_fname, pos.pos_lnum, pos.pos_bol)
  in
  (filename, linenum, pos.pos_cnum - linebeg)

let print ppf loc =
  let (file, line, startchar) = get_pos_info loc.loc_start in
  let endchar = loc.loc_end.pos_cnum - loc.loc_start.pos_cnum + startchar in
  let (startchar, endchar) =
    if startchar < 0 then (0, 1) else (startchar, endchar)
  in
  if file = "" then begin
      fprintf ppf "Characters %i-%i:@."
              loc.loc_start.pos_cnum loc.loc_end.pos_cnum
  end else begin
    fprintf ppf "%s%s%s%i" msg_file file msg_line line;
    fprintf ppf "%s%i" msg_chars startchar;
    fprintf ppf "%s%i%s@.%s" msg_to endchar msg_colon msg_head;
  end
end

}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (* Interface to the ocaml and ocamllex lexers *)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@ocaml {
module Ocaml = struct
  open Ocaml_lexer.Parser
  open Lexing
  let is t x = (x=t)
  (* consume the longest balanced sequence of tokens until we reach a token
     satisfying f, or we reach an unbalanced token.  Return the last token read. *)
  let rec balanced f lexbuf =
    let resume() = balanced f lexbuf in
    let resume_after tk =
      let last = balanced (is tk) lexbuf in
      if last = tk then resume() else tk in
    let tk = Ocaml_lexer.token lexbuf in
    if f tk then tk else
    match tk with
    | LBRACE          -> resume_after RBRACE        (* {}   *)
    | LBRACELESS      -> resume_after GREATERRBRACE (* {<>} *)
    | LBRACKET        -> resume_after RBRACKET      (* []   *)
    | LBRACKETBAR     -> resume_after BARRBRACKET   (* [||] *)
    | LBRACKETLESS    -> resume_after RBRACKET      (* [<]  *)
    | LBRACKETGREATER -> resume_after RBRACKET      (* [>]  *)
    | LPAREN          -> resume_after RPAREN        (* ()   *)
    | EOF
    | RBRACE
    | RBRACKET
    | RPAREN
    | BARRBRACKET
    | GREATERRBRACE   -> tk (* unbalanced tokens *)
    | GREATERRBRACKET -> resume() (* >] defined but not used in ocaml-3.11 *)
    | _               -> resume()
  let wrap f = Yak.YkBuf.wrap_ocamllex (balanced f)
  let until_RBRACE = wrap (is RBRACE)
  let until_RPAREN = wrap (is RPAREN)
  let until_EQUAL = wrap (is EQUAL)
  let until_RBRACKET = wrap (is RBRACKET)
end
module Ocamllex = struct
  open Ocamllex_lexer.Parser
  let is = Ocaml.is
  let rec balanced f lexbuf =
    let resume() = balanced f lexbuf in
    let resume_after tk =
      let last = balanced (is tk) lexbuf in
      if last = tk then resume() else tk in
    let tk = Ocamllex_lexer.main lexbuf in
    if f tk then tk else
    match tk with
    | Tlparen   -> resume_after Trbracket      (* () *)
    | Tlbracket -> resume_after Trbracket      (* [] *)
    | Trparen
    | Trbracket
    | Teof
    | RBRACE    -> tk (* unbalanced tokens *)
    | _         -> resume()
  let wrap f = Yak.YkBuf.wrap_ocamllex (balanced f)
  let until_RBRACE = wrap (is RBRACE)
end
}
@ocaml {
module Posn = struct
open Yak.YkBuf (* In a module so we don't open everywhere *)
open Lexing
let get (start:int) ykb =
  Some(0,(ykb.buf.lex_curr_p))
end
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (* A lexer for Yakker input files *)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@ocamllex {
  {
  let int_of_string x =
    (try int_of_string x with _ -> Printf.eprintf "FAILED INT_OF_STRING: %s\n%!" x; 0)
  type tok =
  | EOF
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | LANGLE
  | RANGLE
  | BAR
  | DASH
  | AT
  | DOLLAR
  | STAR
  | HASH
  | EXCL
  | AMP
  | DOT
  | COLON
  | EQ
  | EQSLASH
  | SLASH
  | DECVAL
  | HEXVAL
  | BINVAL
  | WHEN
  | DELAY
  | BOX
  | ATPOS
  | DOLLARPOS
  | BEGIN
  | END
  | REPEAT
  | COUNTER
  | OCAML
  | OCAMLLEX
  | DYPGENLEX
  | IMPLICIT_PARAMETERS
  | DECLARE_LEXER
  | DECLARE_LEXER2
  | SET_LEXER
  | CHARVAL of string
  | PROSEVAL of string
  | DIGITS of int
  | ATID of string
  | DOLLARID of string
  | ID of string
  }
  let newline = ('\010' | '\013' | "\013\010")
  let blank = [' ' '\009' '\012']
  rule tok = parse
    newline
      { Ocaml_lexer.update_loc lexbuf None 1 false 0;
        tok lexbuf
      }
  | blank
      { tok lexbuf }
  | ";" [^ '\010' '\013']* newline
      { Ocaml_lexer.update_loc lexbuf None 1 false 0;
        tok lexbuf }
  | ";" [^ '\010' '\013']* eof
      {EOF}
  | "#" [' ' '\t']* (['0'-'9']+ as num) [' ' '\t']*
        ("\"" ([^ '\010' '\013' '"' ] * as name) "\"")?
        [^ '\010' '\013'] * newline
      { Ocaml_lexer.update_loc lexbuf name (int_of_string num) true 0;
        tok lexbuf
      }
  | eof                    {EOF}
  | "("                    {LPAREN}
  | ")"                    {RPAREN}
  | "{"                    {LBRACE}
  | "}"                    {RBRACE}
  | "["                    {LBRACK}
  | "]"                    {RBRACK}
  | ">"                    {RANGLE}
  | "|"                    {BAR}
  | "-"                    {DASH}
  | "@"                    {AT}
  | "$"                    {DOLLAR}
  | "*"                    {STAR}
  | "#"                    {HASH}
  | "!"                    {EXCL}
  | "&"                    {AMP}
  | "."                    {DOT}
  | ":"                    {COLON}
  | "="                    {EQ}
  | "=/"                   {EQSLASH}
  | "/"                    {SLASH}
  | "@when"                {WHEN}
  | "@pos"                 {ATPOS}
  | "$pos"                 {DOLLARPOS}
  | "@delay"               {DELAY}
  | "@box"                 {BOX}
  | "@begin"               {BEGIN}
  | "@end"                 {END}
  | "@repeat"              {REPEAT}
  | "@counter"             {COUNTER}
  | "@ocaml"               {OCAML}
  | "@ocamllex"            {OCAMLLEX}
  | "@dypgenlex"           {DYPGENLEX}
  | "@implicit-parameters" {IMPLICIT_PARAMETERS}
  | "@declare-lexer"       {DECLARE_LEXER}
  | "@declare-lexer2"      {DECLARE_LEXER2}
  | "@set-lexer"           {SET_LEXER}
  | "\"" (['\032' '\033' '\035'-'\126']* as x) "\""
                           {CHARVAL(x)}
  | "<" ((['\032'-'\061' '\063'-'\126']*) as x) ">"
                           {if x="\"" then CHARVAL(x) else PROSEVAL(x)}
  | "<"                    {LANGLE}
  | "%d"                   {DECVAL}
  | "%b"                   {BINVAL}
  | "%x"                   {HEXVAL}
  | ['0'-'9']+             {DIGITS(int_of_string(Lexing.lexeme lexbuf))}
  | ['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '_' '0'-'9' ':' '-']*
                           {ID(Lexing.lexeme lexbuf)}
  | "@" (['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '_' '0'-'9' ':' '-']* as x)
                           {ATID(x)}
  | "$" (['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '_' '0'-'9' ':' '-']* as x)
                           {DOLLARID(x)}
  and dec_range = parse
    (['0'-'9']+ as d1) '-' (['0'-'9']+ as d2)
                           {let d1,d2 = int_of_string d1,int_of_string d2 in mkCHARRANGE(d1,d2)}
  | ['0'-'9']+ as d        {let d = int_of_string d in mkCHARRANGE(d,d)}
  and bin_range = parse
    (['0'-'1']+ as d1) '-' (['0'-'1']+ as d2)
                           {let d1,d2 = int_of_string("0b"^d1),int_of_string("0b"^d2) in mkCHARRANGE(d1,d2)}
  | ['0'-'1']+ as d        {let d = int_of_string("0b"^d) in mkCHARRANGE(d,d)}
  and hex_range = parse
    (['0'-'9' 'a'-'f' 'A'-'F']+ as d1) '-' (['0'-'9' 'a'-'f' 'A'-'F']+ as d2)
                           {let d1,d2 = int_of_string("0x"^d1),int_of_string("0x"^d2) in mkCHARRANGE(d1,d2)}
  | ['0'-'9' 'a'-'f' 'A'-'F']+ as d
                           {let d = int_of_string("0x"^d) in mkCHARRANGE(d,d)}
  {
  let token = Yak.YkBuf.wrap_ocamllex tok
  let token_peek = Yak.YkBuf.peek_ocamllex tok

  let dec_range = Yak.YkBuf.wrap_ocamllex dec_range
  let bin_range = Yak.YkBuf.wrap_ocamllex bin_range
  let hex_range = Yak.YkBuf.wrap_ocamllex hex_range
  }
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (* Interface to the Yakker lexer *)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@declare-lexer token @({tok}) token_peek =
  EOF
| LPAREN =                "("
| RPAREN =                ")"
| LBRACE =                "{"
| RBRACE =                "}"
| LBRACK =                "["
| RBRACK =                "]"
| RANGLE =                ">"
| BAR =                   "|"
| DASH =                  "-"
| AT =                    "@"
| DOLLAR =                "$"
| STAR =                  "*"
| HASH =                  "#"
| EXCL =                  "!"
| AMP =                   "&"
| DOT =                   "."
| COLON =                 ":"
| EQ =                    "="
| EQSLASH =               "=/"
| SLASH =                 "/"
| LANGLE =                "<"
| DECVAL =                "%d"
| HEXVAL =                "%x"
| BINVAL =                "%b"
| ATPOS =                 "@pos"
| DOLLARPOS =             "$pos"
| WHEN =                  "@when"
| DELAY =                 "@delay"
| BOX =                   "@box"
| BEGIN =                 "@begin"
| END =                   "@end"
| OCAML =                 "@ocaml"
| OCAMLLEX =              "@ocamllex"
| DYPGENLEX =             "@dypgenlex"
| REPEAT =                "@repeat"
| COUNTER =               "@counter"
| IMPLICIT_PARAMETERS =   "@implicit-parameters"
| DECLARE_LEXER =         "@declare-lexer"
| DECLARE_LEXER2 =        "@declare-lexer2"
| SET_LEXER =             "@set-lexer"
| CHARVAL@({string})
| PROSEVAL@({string})
| DIGITS@({int})
| ID@({string})
| ATID@({string})
| DOLLARID@({string})
.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (* The Yakker parser *)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;start = rulelist$x EOF { Pr.pr_grammar stdout x }.

rulelist
  = [shebang-line]
    prologue$p
    1*(  rule$rd             {let (n,r,a) = rd in [RuleDef (n,r,a)]}
       | directive           {[]}
       | lexer-declaration$d {[d]})$xs
    epilogue$e
    EOF
    { let ts, ps = partition_map (function Text_directive t -> Util.Left t
                                         | Disamb_directive d  -> Util.Right d) p in
      let pd = extract_pd ps in
      let ds = List.flatten xs in
      mkGrammar ds PMap.empty (List.rev ts) e pd}.

;;; auxilliary lexer for shebang-line
not-line-end = ((CHAR - LF) - CR) .
shebang-line = "#!" *not-line-end.

;;; auxilliary lexer for character literals
dec-range = @box >@(rhs)(dec_range)@x @delay{rhs}(x)
bin-range = @box >@(rhs)(bin_range)@x @delay{rhs}(x)
hex-range = @box >@(rhs)(hex_range)@x @delay{rhs}(x)
; we don't put num-val into the ocamllex lexer because it is easier to handle sequences in yakker
num-val =
  "%d" dec-range$r *("." dec-range)$rl {mkSEQ(r::rl)} ; no spaces allowed between ranges
| "%x" hex-range$r *("." hex-range)$rl {mkSEQ(r::rl)}
| "%b" bin-range$r *("." bin-range)$rl {mkSEQ(r::rl)}

Ocaml_until_RBRACE = (@box >@(Ocaml_lexer.Parser.token) (Ocaml.until_RBRACE))@y$x @when(y=Ocaml_lexer.Parser.RBRACE) { all_but_last x }
.

Ocaml_until_RPAREN = @box >@(Ocaml_lexer.Parser.token) (Ocaml.until_RPAREN)@y$x @when(y=Ocaml_lexer.Parser.RPAREN) { all_but_last x }
.

Ocaml_until_EQUAL = @box >@(Ocaml_lexer.Parser.token) (Ocaml.until_EQUAL)@y$x @when(y=Ocaml_lexer.Parser.EQUAL) { all_but_last x }
.

Ocaml_until_RBRACKET = @box >@(Ocaml_lexer.Parser.token) (Ocaml.until_RBRACKET)@y$x @when(y=Ocaml_lexer.Parser.RBRACKET) { all_but_last x }
.

Ocamllex_until_RBRACE = @box >@(Ocamllex_lexer.Parser.token) (Ocamllex.until_RBRACE)@y$x @when(y=Ocamllex_lexer.Parser.RBRACE) { all_but_last x }
.

;posn = (@box >@(int*int) (Posn.get))@x @delay{Lexing.position}(x)


;;

defined-as = "=" | "=/".

rulename = ID.

closed-text = ID$x {x} | "(" Ocaml_until_RPAREN$x {x}.

infix-op-stuff
  = ("/" | "|") alternation$x {(0,x)}
  | "-" alternation$x {(1,x)}
.

alternation =
  concatenation$x [infix-op-stuff$z {z}]$y
  {process_alt x y}
.

concatenation
  = lookahead$x {x}
  | lookahead$x  ">" ATID$e     ; TODO: late attributes
    { mkASSIGN(x,Some e,None) }
  | lookahead$x [ ATID$i {i} ]$e [ DOLLARID$i {i} ]$l concatenation$y
    { mkSEQ2(x,e,l,y) }
.

element
  = rulename$x params$p ["$(" Ocaml_until_RPAREN$b {b}]$z {let (e,a) = p in mkSYMB2(x,e,a,z)}
  | group$x {x} | option$x {x} | CHARVAL$x {mkLIT x} | num-val$x {x} | PROSEVAL$x {mkPROSE x}
  | "@when" "(" Ocaml_until_RPAREN$x { mkWHEN x }
  | "@delay" [return-type]$y "(" Ocaml_until_RPAREN$x { mkDELAY(x,y) }
  | "@box" [early-return]$y [boxnull]$z "(" Ocaml_until_RPAREN$x { mkBOX(x,y,match z with None -> Runbox_null | Some w -> w) }
  | "{" Ocaml_until_RBRACE$x { mkACTION2(None,Some x) }
  | "$" "{" Ocaml_until_RBRACE$x { mkACTION2(None, Some x) }
  | "@" "{" Ocaml_until_RBRACE$x { mkACTION2(Some x,None) }
  | "@pos" {mkPOSITION true}
  | "$pos" {mkPOSITION false}.

boxnull =
  "+" {Never_null}
| "*" {Always_null}
| "?" [return-type]$x {match x with None -> Runbox_null | Some y -> Runpred_null y}.

params =
  "@" "(" Ocaml_until_RPAREN$t
    { match split t ';' with  (* This isn't robust because ; can be used inside of expressions*)
        [] -> (Some t,[])
      | ""::tl -> (None,List.map var_exp tl)
      | hd::tl -> (Some hd,List.map var_exp tl) }
  | "" {(None,[])}
.

elements = alternation$x {x}.

group = "(" alternation$x ")" {x}.

option = "[" alternation$x "]" {mkOPT x}.

lookahead
  = repetition$e {e}
  | "!" lookahead$e {mkLOOKAHEAD (false,e)}
  | "&" lookahead$e {mkLOOKAHEAD (true, e)}
  | "@repeat" "(" Ocaml_until_RPAREN$x lookahead$y {mkRCOUNT(x,y)}
  | "*" "@" "[" Ocaml_until_EQUAL$v1 Ocaml_until_RBRACKET$i1
        lookahead$z { {r=Star(Accumulate(Some(v1,i1),None),z);a=mkAnnot(Some z);} }
  | "*" "$" "[" Ocaml_until_EQUAL$v2 Ocaml_until_RBRACKET$i2
        lookahead$z { {r=Star(Accumulate(None,Some(v2,i2)),z);a=mkAnnot(Some z);} }
  | "*" "@" "[" Ocaml_until_EQUAL$v1 Ocaml_until_RBRACKET$i1
        "$" "[" Ocaml_until_EQUAL$v2 Ocaml_until_RBRACKET$i2
        lookahead$z { {r=Star(Accumulate(Some(v1,i1),Some(v2,i2)),z);a=mkAnnot(Some z);} }
  | "#" "@" "[" Ocaml_until_EQUAL$v1 Ocaml_until_RBRACKET$i1
        lookahead$z { {r=Hash(Accumulate(Some(v1,i1),None),z);a=mkAnnot(Some z);} }
  | "#" "$" "[" Ocaml_until_EQUAL$v2 Ocaml_until_RBRACKET$i2
        lookahead$z { {r=Hash(Accumulate(None,Some(v2,i2)),z);a=mkAnnot(Some z);} }
  | "#" "@" "[" Ocaml_until_EQUAL$v1 Ocaml_until_RBRACKET$i1
        "$" "[" Ocaml_until_EQUAL$v2 Ocaml_until_RBRACKET$i2
        lookahead$z { {r=Hash(Accumulate(Some(v1,i1),Some(v2,i2)),z);a=mkAnnot(Some z);} }
  .

repetition
  = element$e {e}
  | DIGITS$x element$y                  {mkSTAR(x,Num x,y)}
  | DIGITS$x "*" element$y            {mkSTAR(x,Infinity,y)}
  | DIGITS$x "*" DIGITS$z element$y {mkSTAR(x,Num z,y)}
  | "*" DIGITS$z element$y            {mkSTAR(0,Num z,y)}
  | "*" element$y                       {mkSTAR(0,Infinity,y)}
  | DIGITS$x "#" element$y            {mkHASH(x,Infinity,y)}
  | DIGITS$x "#" DIGITS$z element$y {mkHASH(x,Num z,y)}
  | "#" DIGITS$z element$y            {mkHASH(0,Num z,y)}
  | "#" element$y                       {mkHASH(0,Infinity,y)}
.

typestuff =
  [early-inputs]$x
  [early-outputs]$y
  [late-inputs]$z
  {{Attr.early_params = (match x with None -> None | Some(params,_) -> params);
    input_attributes =  (match x with None -> []   | Some(_,attributes) -> attributes);
    early_rettype =     (match y with None -> None | Some(typ,_) -> typ);
    output_attributes = (match y with None -> []   | Some(_,attributes) -> attributes);
    early_param_type = None;
    late_params=z;}}
.
early-inputs =
  "@" "("  Ocaml_until_RPAREN$t        ;;; example: @(a:int,b:bool;x:string;y:bool*int list)
  { match split t ';' with
      [] -> (Some t,[])
    | ""::tl -> (None,List.map var_typ tl)
    | hd::tl -> (Some hd,List.map var_typ tl) }
.
early-outputs =
  ">" "@" "(" Ocaml_until_RPAREN$t        ;;; example: >@(int;x:string;y:bool*int list)
  { match split t ';' with
      [] -> (Some t,[])
    | ""::tl -> (None,List.map var_typ tl)
    | hd::tl -> (Some hd,List.map var_typ tl) }
.
late-inputs =
  "$" "("  Ocaml_until_RPAREN$t {t}    ;;; example: $(x,y,z)
.

; TODO: change lexer declarations and blackbox/delay to reflect new
; return type syntax (early-return)
return-type = "{" Ocaml_until_RBRACE$y {y}
.
early-return = ">" "@" "(" Ocaml_until_RPAREN$t {t}
.
rettype = "@" "(" "{" Ocaml_until_RBRACE$t ")" {t}
.
lexer-case =
  ID$n [rettype]$t_opt "=" ID$n2     { TokenSymb(n,t_opt,Some n2) }
| ID$n [rettype]$t_opt               { TokenSymb(n,t_opt,None) }
| ID$n [rettype]$t_opt "=" CHARVAL$s { TokenLit(n,t_opt,s) }
| CHARVAL$s [rettype]$t_opt "=" ID$n { TokenLit(n, t_opt, s) }
.
lexer-cases = ["|" ] lexer-case$hd (*("|" lexer-case))$tl ["."] { hd::tl }
.

lexer-declaration =
  "@declare-lexer"
  ID$n rettype$t ID$np "="
  lexer-cases$l
  { LexerDecl(n,np,t,l) }
| "@declare-lexer2"
  closed-text$f closed-text$ty "="
  lexer-cases$l
  { LexerDecl2(f,ty,l) }
| "@set-lexer"
  closed-text$f closed-text$ty "="
  lexer-cases$l
  { SingleLexerDecl(f,ty,l) }
.

assoc-tag =
  ATID$x
    { match x with
        ("R" |"right") -> Right_assoc
      | ("L" | "left") -> Left_assoc
      | ("N" | "non")  -> Non_assoc
      | _ -> Non_assoc } ; TODO: error message or rule out with @when
.

rule
  = rulename$n typestuff$y defined-as elements$r ["."]
    {(n, r, y)}
  .

prologue =
  *("@begin" "{" Ocaml_until_RBRACE$x {Text_directive (Ocaml x)}
   |"@ocaml" "{" Ocaml_until_RBRACE$x {Text_directive (Ocaml x)}
   |"@ocamllex" "{" Ocaml_until_RBRACE$x {Text_directive (Ocamllex x)}
   |"@dypgenlex" "{" Ocaml_until_RBRACE$x {Text_directive (Dypgenlex x)})
.

epilogue =
  *("@end" "{" Ocaml_until_RBRACE$x {Ocaml x}
   |"@ocaml" "{" Ocaml_until_RBRACE$x {Ocaml x}
   |"@ocamllex" "{" Ocaml_until_RBRACE$x {Ocamllex x}).

directive =
  "@counter" "(" 1*DIGIT$x ")"
  { Variables.counter := (int_of_string x)}.

; @end {
;   Yak.Pami.Simple.qrun parse_file
; }
